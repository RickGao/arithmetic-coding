#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
快速使用示例
"""

from ngram import NGramModel
from arithmetic_coding import ArithmeticEncoder


# ============================================================================
# 示例 1: 基本使用流程
# ============================================================================
print("=" * 70)
print("示例 1: 基本使用流程")
print("=" * 70)

# 准备训练数据
training_sequences = [
    [1, 2, 3, 4, 5],
    [2, 3, 4, 5, 6],
    [1, 2, 3, 5, 6],
    [1, 2, 4, 5, 6],
    [1, 2, 4, 5, 6, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
]

# training_sequences = [
#     [786, 1607, 1706, 881, 1014, 972, 2008, 1564, 325, 613, 1875, 522, 753, 845, 522, 1564, 753, 555, 572, 1384, 753, 1912, 2009, 1261, 911, 1233, 1462, 803, 325, 1523, 1968, 1384, 325, 335, 2008, 1971, 753, 274, 572, 1202, 325, 1476, 272, 1511, 753, 373, 35, 1157, 865, 342, 2026, 1834, 1302, 1901, 205, 498, 397, 1326, 1681, 522, 911, 234, 1532, 1971, 1974, 560, 743, 261, 673, 554, 769, 1626, 1208, 1906, 925, 631, 1974, 1750, 1960, 305, 1974, 1476, 11, 599, 297, 1198, 254, 1109, 1527, 615, 1480, 180, 1770, 685, 6, 803, 1749, 899, 1011, 522, 1369, 1364, 1768, 772, 1147, 1016, 1146, 751, 1230, 1737, 353, 845, 1189, 254, 1564, 522, 775, 851, 1370, 1961, 1485, 1530, 1025, 1532, 1485, 465, 572, 356, 996, 156, 1443, 1961, 775, 103, 1727, 751, 1032, 63, 1155, 512, 978, 763, 740, 305, 1230, 1618, 136, 1015, 1331, 1713, 623, 666, 1369, 49, 1681, 1020, 201, 1623, 440, 2038, 1510, 1496, 726, 630, 347, 210, 924, 1384, 1397, 587, 701, 970, 1425, 1271, 1597, 1480, 313, 645, 1353, 272, 1925, 16, 11, 1384, 41, 764, 278, 1157, 1925, 1398, 939, 1511, 787, 476, 447, 522, 1397, 1781, 517, 356, 1302, 972, 1740, 367, 1190, 1155, 1608, 995, 223, 434, 243, 564, 1925, 655, 292, 1834, 41, 1616, 2038, 1765, 1442, 1399, 2009, 353, 1075, 1954, 465, 180, 290, 135, 1274, 1025, 1098, 1105, 1681, 995, 1689, 1962, 546, 536, 948, 310, 701, 1504, 208, 376, 845, 564, 1914, 1740, 1007, 751, 1896, 167, 1458, 137, 1069, 1199, 1928, 1971, 1121, 851, 851, 939, 1761, 170, 1142, 1202, 906, 850, 1837, 53, 1557, 1908, 135, 465, 380, 1288, 1987, 1020, 380, 1695, 329, 572, 1518, 274, 1233, 1111, 1981, 838, 823, 1750, 1450, 1583, 1074, 2026, 52, 1604, 726, 522, 1230, 521, 705, 599, 477, 1660, 134, 512, 547, 13, 751, 803, 1556, 213, 1443, 1748, 1435, 2046, 136, 1626, 759, 1074, 891, 1947, 1075, 1120, 232, 772, 1278, 331, 743, 1532, 2000, 686, 667, 1111, 1650, 1926, 465, 844, 1075, 2007, 2008, 1015, 1661, 924, 891, 406, 1520, 1781, 1727, 2009, 8, 999, 1873, 630, 485, 274, 610, 1011, 1689, 1717, 70, 891, 347, 769, 6, 772, 3, 2046, 616, 1011, 904, 1809, 278, 751, 8, 851, 1670, 1458, 41, 1088, 1960, 1462, 347, 1448, 1545, 2009, 787, 431, 1801, 1157, 1168, 344, 1941, 536, 485, 526, 1458, 356, 1134, 1982, 624, 970, 890, 554, 1443, 1261, 418, 705, 1743, 1834, 713, 1158, 573, 1511, 539, 58, 629, 1163, 153, 1852, 1322, 1202, 1189, 329, 1357, 564, 1230, 1852, 1209, 1504, 1009, 127, 1146, 995, 775, 764, 533, 278, 775, 685, 962, 353, 849, 958, 924, 883, 1147, 416, 1437, 564, 1518, 1927, 560, 1202, 570, 838, 1129, 1129, 1983, 1364, 441, 180, 958, 1099, 751, 1202, 1499, 1281, 367, 197, 978, 65, 726, 2009, 1838, 1832, 136, 1765, 200, 243, 356, 803, 485, 1609, 1897, 2038, 809, 540, 881, 1564, 2, 813, 1179, 1539, 1360, 103, 763, 883, 1942, 216, 1681, 1599, 1719, 664, 2011, 498, 231, 1399, 891, 939, 208, 1089, 1040, 1480, 347, 1727, 512, 1564, 3, 1448, 1727, 1504, 1520, 1074, 743, 579, 784, 1897, 579, 1971, 297, 1203, 508, 1765, 8, 575, 2011, 966, 8, 167, 1109, 70, 1442, 1277, 536, 1602, 8, 1701, 899, 250, 1075, 2007, 292, 1379, 1075, 1832, 1968, 883, 1849, 1717, 564, 1511, 1273, 42, 1443, 1539, 383, 738, 2038, 1462, 519, 1706, 1530, 1261, 660, 1754, 172, 1179, 1237, 761, 141, 1462, 1983, 51, 1784, 887, 632, 1203, 1174, 630, 1806, 376, 1758, 1564, 1557, 877, 848, 1834, 1557, 346, 1020, 1462, 1557, 173, 1599, 498, 1981, 1317, 479, 1987, 570, 1122, 982, 887, 658, 1074, 1111, 70, 702, 437, 1968, 1758, 997, 1848, 546, 808, 1251, 618, 845, 939, 1156, 1908, 1078, 1199, 1270, 1578, 205, 564, 706, 1155, 1011, 172, 485, 896, 1897, 970, 488, 1478, 1146, 6, 1734, 143, 135, 498, 169, 1246, 1608, 1968, 698, 1239, 573, 1111, 793, 1260, 924, 2009, 1719, 187, 666, 1539, 62, 1040, 898, 1961, 1520, 1158, 1266, 1163, 1168, 80, 1581, 1007, 485, 1609, 322, 1504, 1348, 918, 1902, 844, 290, 616, 1006, 1462, 290, 1625, 58, 1834, 347, 1018, 232, 189, 1190, 1894, 536, 1599, 1689, 618, 135, 1539, 948, 1300, 1960, 1626, 888, 1496, 995, 808, 1849, 195, 1743, 1129, 1547, 757, 533, 536, 1536, 1184, 1743, 995, 1546, 850, 278, 522, 1434, 1088, 636, 599, 443, 903, 2032, 367, 893, 65, 1202, 134, 1807, 1968, 1384, 180, 1189, 1785, 925, 1157, 1471, 392, 546, 1961, 745, 1155, 376, 1011, 257, 479, 1758, 1971, 1147, 575, 1748, 1157, 106, 1662, 694, 1834, 968, 1362, 967, 441, 1797, 49, 898, 1765, 1083, 618, 740, 845, 378, 103, 1274, 1202, 1460, 1356, 70, 1261, 523, 590, 441, 1384, 886, 1685, 189, 1209, 1869, 348, 1415, 1020, 519, 1649, 1287, 1462, 219, 876, 533, 232, 951, 618, 1722, 564, 1989, 738, 1209, 522, 1147, 851, 441, 2009, 804, 521, 1777, 278, 1365, 738, 1511, 1961, 929, 1040, 1938, 180, 1638, 705, 335, 1462, 1168, 1592, 1254, 1564, 27, 16, 931, 891, 1296, 1272, 1670, 844, 1500, 2046, 250, 1971, 290, 1746, 1539, 172, 1500, 896, 1379, 1240, 1024, 1644, 931, 1902, 1221, 1305, 740, 1602, 707, 2006, 517, 356, 1520, 989, 636, 1209, 1527, 606, 1144, 1564, 30, 376, 1015, 1202, 219, 213, 924, 2009, 1330, 250, 1020, 406, 938, 783, 667, 412, 1828, 1523, 2008, 808, 632, 1203, 642, 564, 1806, 616, 966, 599, 1788, 167, 278, 743, 1788, 312, 1266, 995, 1788, 645, 1384, 406, 528, 1115, 1801, 1765, 1138, 1616, 1968, 844, 1197, 1717, 1648, 1179, 893, 323, 1109, 803, 1289, 508, 1254, 1902, 719, 701, 1941, 305, 302, 518, 197, 939, 1965, 1735, 1287, 1261, 224, 442, 1801, 1626, 1282, 1044, 6, 939, 1512, 269, 970, 261, 1985, 1670, 2009, 22, 1922, 524, 324, 1157, 799, 1259, 2026, 743, 1541, 807, 1681, 498, 745, 1326, 1020, 808, 45, 1357, 1539, 1987, 439, 1809, 1468, 522, 1354, 972, 848, 2009, 1964, 486, 1274, 808, 1719, 624, 1240, 995, 8, 246, 2028, 278, 1022, 1809, 2026, 189, 1168, 1239, 531, 1209, 27, 1743, 512, 522, 1221, 1493, 1015, 1511, 1221, 1848, 697, 1163, 1647, 1198, 883, 1261, 380, 1860, 342, 1597, 1547, 1421, 772, 353, 1914, 686, 667, 1379, 1770, 1826, 1362, 1928, 779, 1088, 1480, 630, 1123, 1364, 278, 1261, 702, 1784, 329, 73, 1634, 1341, 1837, 891, 745, 669, 1987, 1504, 745, 254, 883, 180, 745, 376, 465, 54, 693, 1288, 586, 803, 320, 156, 1006, 1928, 459, 1856, 623, 172, 570, 2028, 232, 1524, 1147, 1722, 172, 406, 241, 526, 1109, 1765, 156, 1353, 772, 356, 1724, 296, 1681, 1179, 1407, 1341, 422, 808, 221, 1496, 15, 22, 1915, 1705, 70, 1902, 640, 440, 441, 1564, 1226, 1695, 1233, 2038, 1937, 365, 2008, 1109, 1139, 1717, 891, 353, 530, 1182, 1700, 1179, 1889, 2037, 66, 1261, 627, 1016, 546, 1532, 1315, 434, 642, 845]
# ]

# 步骤1: 训练N-gram模型
model = NGramModel(n=3, k=0.00001, start_token=-1, end_token=-2)
model.fit(training_sequences)
prob_dist = model.get_probability_distribution()

print(prob_dist)
print(f"模型训练完成！词汇表大小: {len(model.vocab)}")

# 步骤2: 创建算术编码器
encoder = ArithmeticEncoder(ngram_model=model, bits=32)

# 步骤3: 编码一个新序列
# test_sequence = [1, 2, 3, 4, 5]
# test_sequence = [11, 12, 13, 14, 15]
# test_sequence = [786, 1607, 1706, 881, 1014, 972, 2008, 1564, 325, 613, 1875, 522, 753, 845, 522, 1564, 753, 555, 572, 1384, 753, 1912, 2009, 1261, 911, 1233, 1462, 803, 325, 1523, 1968, 1384, 325, 335, 2008, 1971, 753, 274, 572, 1202, 325, 1476, 272, 1511, 753, 373, 35, 1157, 865, 342, 2026, 1834, 1302, 1901, 205, 498, 397, 1326, 1681, 522, 911, 234, 1532, 1971, 1974, 560, 743, 261, 673, 554, 769, 1626, 1208, 1906, 925, 631, 1974, 1750, 1960, 305, 1974, 1476, 11, 599, 297, 1198, 254, 1109, 1527, 615, 1480, 180, 1770, 685, 6, 803, 1749, 899, 1011, 522, 1369, 1364, 1768, 772, 1147, 1016, 1146, 751, 1230, 1737, 353, 845, 1189, 254, 1564, 522, 775, 851, 1370, 1961, 1485, 1530, 1025, 1532, 1485, 465, 572, 356, 996, 156, 1443, 1961, 775, 103, 1727, 751, 1032, 63, 1155, 512, 978, 763, 740, 305, 1230, 1618, 136, 1015, 1331, 1713, 623, 666, 1369, 49, 1681, 1020, 201, 1623, 440, 2038, 1510, 1496, 726, 630, 347, 210, 924, 1384, 1397, 587, 701, 970, 1425, 1271, 1597, 1480, 313, 645, 1353, 272, 1925, 16, 11, 1384, 41, 764, 278, 1157, 1925, 1398, 939, 1511, 787, 476, 447, 522, 1397, 1781, 517, 356, 1302, 972, 1740, 367, 1190, 1155, 1608, 995, 223, 434, 243, 564, 1925, 655, 292, 1834, 41, 1616, 2038, 1765, 1442, 1399, 2009, 353, 1075, 1954, 465, 180, 290, 135, 1274, 1025, 1098, 1105, 1681, 995, 1689, 1962, 546, 536, 948, 310, 701, 1504, 208, 376, 845, 564, 1914, 1740, 1007, 751, 1896, 167, 1458, 137, 1069, 1199, 1928, 1971, 1121, 851, 851, 939, 1761, 170, 1142, 1202, 906, 850, 1837, 53, 1557, 1908, 135, 465, 380, 1288, 1987, 1020, 380, 1695, 329, 572, 1518, 274, 1233, 1111, 1981, 838, 823, 1750, 1450, 1583, 1074, 2026, 52, 1604, 726, 522, 1230, 521, 705, 599, 477, 1660, 134, 512, 547, 13, 751, 803, 1556, 213, 1443, 1748, 1435, 2046, 136, 1626, 759, 1074, 891, 1947, 1075, 1120, 232, 772, 1278, 331, 743, 1532, 2000, 686, 667, 1111, 1650, 1926, 465, 844, 1075, 2007, 2008, 1015, 1661, 924, 891, 406, 1520, 1781, 1727, 2009, 8, 999, 1873, 630, 485, 274, 610, 1011, 1689, 1717, 70, 891, 347, 769, 6, 772, 3, 2046, 616, 1011, 904, 1809, 278, 751, 8, 851, 1670, 1458, 41, 1088, 1960, 1462, 347, 1448, 1545, 2009, 787, 431, 1801, 1157, 1168, 344, 1941, 536, 485, 526, 1458, 356, 1134, 1982, 624, 970, 890, 554, 1443, 1261, 418, 705, 1743, 1834, 713, 1158, 573, 1511, 539, 58, 629, 1163, 153, 1852, 1322, 1202, 1189, 329, 1357, 564, 1230, 1852, 1209, 1504, 1009, 127, 1146, 995, 775, 764, 533, 278, 775, 685, 962, 353, 849, 958, 924, 883, 1147, 416, 1437, 564, 1518, 1927, 560, 1202, 570, 838, 1129, 1129, 1983, 1364, 441, 180, 958, 1099, 751, 1202, 1499, 1281, 367, 197, 978, 65, 726, 2009, 1838, 1832, 136, 1765, 200, 243, 356, 803, 485, 1609, 1897, 2038, 809, 540, 881, 1564, 2, 813, 1179, 1539, 1360, 103, 763, 883, 1942, 216, 1681, 1599, 1719, 664, 2011, 498, 231, 1399, 891, 939, 208, 1089, 1040, 1480, 347, 1727, 512, 1564, 3, 1448, 1727, 1504, 1520, 1074, 743, 579, 784, 1897, 579, 1971, 297, 1203, 508, 1765, 8, 575, 2011, 966, 8, 167, 1109, 70, 1442, 1277, 536, 1602, 8, 1701, 899, 250, 1075, 2007, 292, 1379, 1075, 1832, 1968, 883, 1849, 1717, 564, 1511, 1273, 42, 1443, 1539, 383, 738, 2038, 1462, 519, 1706, 1530, 1261, 660, 1754, 172, 1179, 1237, 761, 141, 1462, 1983, 51, 1784, 887, 632, 1203, 1174, 630, 1806, 376, 1758, 1564, 1557, 877, 848, 1834, 1557, 346, 1020, 1462, 1557, 173, 1599, 498, 1981, 1317, 479, 1987, 570, 1122, 982, 887, 658, 1074, 1111, 70, 702, 437, 1968, 1758, 997, 1848, 546, 808, 1251, 618, 845, 939, 1156, 1908, 1078, 1199, 1270, 1578, 205, 564, 706, 1155, 1011, 172, 485, 896, 1897, 970, 488, 1478, 1146, 6, 1734, 143, 135, 498, 169, 1246, 1608, 1968, 698, 1239, 573, 1111, 793, 1260, 924, 2009, 1719, 187, 666, 1539, 62, 1040, 898, 1961, 1520, 1158, 1266, 1163, 1168, 80, 1581, 1007, 485, 1609, 322, 1504, 1348, 918, 1902, 844, 290, 616, 1006, 1462, 290, 1625, 58, 1834, 347, 1018, 232, 189, 1190, 1894, 536, 1599, 1689, 618, 135, 1539, 948, 1300, 1960, 1626, 888, 1496, 995, 808, 1849, 195, 1743, 1129, 1547, 757, 533, 536, 1536, 1184, 1743, 995, 1546, 850, 278, 522, 1434, 1088, 636, 599, 443, 903, 2032, 367, 893, 65, 1202, 134, 1807, 1968, 1384, 180, 1189, 1785, 925, 1157, 1471, 392, 546, 1961, 745, 1155, 376, 1011, 257, 479, 1758, 1971, 1147, 575, 1748, 1157, 106, 1662, 694, 1834, 968, 1362, 967, 441, 1797, 49, 898, 1765, 1083, 618, 740, 845, 378, 103, 1274, 1202, 1460, 1356, 70, 1261, 523, 590, 441, 1384, 886, 1685, 189, 1209, 1869, 348, 1415, 1020, 519, 1649, 1287, 1462, 219, 876, 533, 232, 951, 618, 1722, 564, 1989, 738, 1209, 522, 1147, 851, 441, 2009, 804, 521, 1777, 278, 1365, 738, 1511, 1961, 929, 1040, 1938, 180, 1638, 705, 335, 1462, 1168, 1592, 1254, 1564, 27, 16, 931, 891, 1296, 1272, 1670, 844, 1500, 2046, 250, 1971, 290, 1746, 1539, 172, 1500, 896, 1379, 1240, 1024, 1644, 931, 1902, 1221, 1305, 740, 1602, 707, 2006, 517, 356, 1520, 989, 636, 1209, 1527, 606, 1144, 1564, 30, 376, 1015, 1202, 219, 213, 924, 2009, 1330, 250, 1020, 406, 938, 783, 667, 412, 1828, 1523, 2008, 808, 632, 1203, 642, 564, 1806, 616, 966, 599, 1788, 167, 278, 743, 1788, 312, 1266, 995, 1788, 645, 1384, 406, 528, 1115, 1801, 1765, 1138, 1616, 1968, 844, 1197, 1717, 1648, 1179, 893, 323, 1109, 803, 1289, 508, 1254, 1902, 719, 701, 1941, 305, 302, 518, 197, 939, 1965, 1735, 1287, 1261, 224, 442, 1801, 1626, 1282, 1044, 6, 939, 1512, 269, 970, 261, 1985, 1670, 2009, 22, 1922, 524, 324, 1157, 799, 1259, 2026, 743, 1541, 807, 1681, 498, 745, 1326, 1020, 808, 45, 1357, 1539, 1987, 439, 1809, 1468, 522, 1354, 972, 848, 2009, 1964, 486, 1274, 808, 1719, 624, 1240, 995, 8, 246, 2028, 278, 1022, 1809, 2026, 189, 1168, 1239, 531, 1209, 27, 1743, 512, 522, 1221, 1493, 1015, 1511, 1221, 1848, 697, 1163, 1647, 1198, 883, 1261, 380, 1860, 342, 1597, 1547, 1421, 772, 353, 1914, 686, 667, 1379, 1770, 1826, 1362, 1928, 779, 1088, 1480, 630, 1123, 1364, 278, 1261, 702, 1784, 329, 73, 1634, 1341, 1837, 891, 745, 669, 1987, 1504, 745, 254, 883, 180, 745, 376, 465, 54, 693, 1288, 586, 803, 320, 156, 1006, 1928, 459, 1856, 623, 172, 570, 2028, 232, 1524, 1147, 1722, 172, 406, 241, 526, 1109, 1765, 156, 1353, 772, 356, 1724, 296, 1681, 1179, 1407, 1341, 422, 808, 221, 1496, 15, 22, 1915, 1705, 70, 1902, 640, 440, 441, 1564, 1226, 1695, 1233, 2038, 1937, 365, 2008, 1109, 1139, 1717, 891, 353, 530, 1182, 1700, 1179, 1889, 2037, 66, 1261, 627, 1016, 546, 1532, 1315, 434, 642, 845]
test_sequence = [5, 4, 3, 2, 1]

encoded_bits = encoder.encode(test_sequence)
print(encoded_bits)
print(f"\n原始序列: {test_sequence}")
print(f"编码后: {len(encoded_bits)} bits")
print(f"压缩率: {len(encoded_bits) / (len(test_sequence) * 11):.2%}")

# 步骤4: 解码验证
decoded_sequence = encoder.decode(encoded_bits)
print(f"解码结果: {decoded_sequence}")
print(f"正确性: {'✓' if decoded_sequence == test_sequence else '✗'}")


# # ============================================================================
# # 示例 2: 查看概率分布
# # ============================================================================
# print("\n" + "=" * 70)
# print("示例 2: 查看概率分布")
# print("=" * 70)
#
# # 获取完整概率分布
# prob_dist = model.get_probability_distribution()
#
# # 查看句子开始的概率
# start_context = model.get_start_context()
# print(f"\n句子开始 {start_context} 后最可能的字符:")
# if start_context in prob_dist:
#     top_chars = sorted(prob_dist[start_context].items(), key=lambda x: -x[1])[:3]
#     for char, prob in top_chars:
#         print(f"  字符 {char}: {prob:.4f}")
#
# # 查看特定上下文
# context = (1, 2)
# print(f"\n给定上下文 {context}:")
# if context in prob_dist:
#     top_chars = sorted(prob_dist[context].items(), key=lambda x: -x[1])[:3]
#     for char, prob in top_chars:
#         marker = " (结束符)" if char == model.end_token else ""
#         print(f"  字符 {char}{marker}: {prob:.4f}")
#
#
# # ============================================================================
# # 示例 3: 直接使用概率分布（不需要NGramModel对象）
# # ============================================================================
# print("\n" + "=" * 70)
# print("示例 3: 直接使用概率分布")
# print("=" * 70)
#
# # 可以保存概率分布，稍后使用
# saved_prob_dist = model.get_probability_distribution()
#
# # 创建新的编码器，直接使用概率分布
# encoder2 = ArithmeticEncoder(
#     prob_distribution=saved_prob_dist,
#     bits=32,
#     start_token=-1,
#     end_token=-2
# )
#
# # 编码
# test_seq2 = [2, 3, 4, 5]
# encoded2 = encoder2.encode(test_seq2)
# decoded2 = encoder2.decode(encoded2)
# print(f"原始: {test_seq2}")
# print(f"编码: {len(encoded2)} bits")
# print(f"解码: {decoded2}")
# print(f"正确: {'✓' if decoded2 == test_seq2 else '✗'}")
#
#
# # ============================================================================
# # 示例 4: 测试不同的N值
# # ============================================================================
# print("\n" + "=" * 70)
# print("示例 4: 比较不同N值的效果")
# print("=" * 70)
#
# test_data = [
#     [1, 2, 3, 4, 5] * 2,  # 重复模式
#     [2, 3, 4, 5, 6] * 2,
# ]
#
# test_sequence_long = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
#
# for n_value in [2, 3, 4]:
#     model_n = NGramModel(n=n_value, k=0.00001)
#     model_n.fit(test_data)
#
#     encoder_n = ArithmeticEncoder(ngram_model=model_n, bits=32)
#     encoded_n = encoder_n.encode(test_sequence_long)
#     decoded_n = encoder_n.decode(encoded_n)
#
#     correct = "✓" if decoded_n == test_sequence_long else "✗"
#     ratio = len(encoded_n) / (len(test_sequence_long) * 11)
#
#     print(f"\nN={n_value}:")
#     print(f"  编码长度: {len(encoded_n)} bits")
#     print(f"  压缩率: {ratio:.2%}")
#     print(f"  正确性: {correct}")
#
#
# # ============================================================================
# # 示例 5: 使用预测功能
# # ============================================================================
# print("\n" + "=" * 70)
# print("示例 5: 使用预测功能")
# print("=" * 70)
#
# model5 = NGramModel(n=3, k=0.01)
# model5.fit([[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 4], [1, 2, 3, 4]])
#
# # 预测下一个字符
# context = (1, 2)
# predicted = model5.predict_next(context)
# prob_dist_ctx = model5.get_next_char_prob(context)
#
# print(f"\n给定上下文 {context}:")
# print(f"预测的下一个字符: {predicted}")
# print(f"概率: {prob_dist_ctx[predicted]:.4f}")
#
# print("\n所有可能的下一个字符:")
# for char, prob in sorted(prob_dist_ctx.items(), key=lambda x: -x[1]):
#     marker = " (结束符)" if char == model5.end_token else ""
#     print(f"  字符 {char}{marker}: {prob:.4f}")
#
#
# print("\n" + "=" * 70)
# print("所有示例完成！")
# print("=" * 70)
